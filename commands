#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_BASE_PATH="$PLUGIN_PATH"
if [[ -n $DOKKU_API_VERSION ]]; then
  PLUGIN_BASE_PATH="$PLUGIN_ENABLED_PATH"
fi
source "$PLUGIN_BASE_PATH/common/functions"
source "$(dirname "$0")/functions"
source "$(dirname "$0")/config"

if [[ $1 == $NEO4J_PLUGIN_COMMAND_PREFIX:* ]]; then
  if [[ ! -d $NEO4J_PLUGIN_DATA_ROOT ]]; then
    dokku_log_fail "$NEO4J_PLUGIN_SERVICE: Please run: sudo dokku plugins-install"
  fi
fi

case "$1" in
  $NEO4J_PLUGIN_COMMAND_PREFIX:alias)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ -z $3 ]] && dokku_log_fail "Please specify an alias for the service"
    verify_service_name "$2"
    service_set_alias "$2" "$3"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:create)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ ! -d "$NEO4J_PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$NEO4J_PLUGIN_SERVICE service $2 already exists"
    SERVICE="$2"; SERVICE_ROOT="$NEO4J_PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"

    ensure_docker_images

    mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
    mkdir -p "$SERVICE_ROOT/data" || dokku_log_fail "Unable to create service data directory"
    mkdir -p "$SERVICE_ROOT/backups" || dokku_log_fail "Unable to create service backups directory"
    touch "$LINKS_FILE"

    dokku_log_info1 "Starting container"
    SERVICE_NAME=$(get_service_name "$SERVICE")
    ID=$(docker run --name "$SERVICE_NAME" -v "$SERVICE_ROOT/data:/var/neo4j/data" -d --restart always --label dokku=service --label dokku.service=neo4j "$NEO4J_PLUGIN_IMAGE_COMMUNITY:$PLUGIN_IMAGE_VERSION")
    echo "$ID" > "$SERVICE_ROOT/ID"
    echo "Community" > "$SERVICE_ROOT/EDITION"

    dokku_log_verbose_quiet "Waiting for container to be ready"
    docker run --rm --link "$SERVICE_NAME:$NEO4J_PLUGIN_COMMAND_PREFIX" aanand/wait

    dokku_log_info2 "$NEO4J_PLUGIN_SERVICE container created: $SERVICE"
    dokku "$NEO4J_PLUGIN_COMMAND_PREFIX:info" "$SERVICE"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:create-enterprise)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ ! -d "$NEO4J_PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$NEO4J_PLUGIN_SERVICE service $2 already exists"
    SERVICE="$2"; SERVICE_ROOT="$NEO4J_PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"

    ensure_docker_images

    mkdir -p "$SERVICE_ROOT" || dokku_log_fail "Unable to create service directory"
    mkdir -p "$SERVICE_ROOT/data" || dokku_log_fail "Unable to create service data directory"
    mkdir -p "$SERVICE_ROOT/backups" || dokku_log_fail "Unable to create service backups directory"
    touch "$LINKS_FILE"

    dokku_log_info1 "Starting container"
    SERVICE_NAME=$(get_service_name "$SERVICE")
    ID=$(docker run --name "$SERVICE_NAME" -v "$SERVICE_ROOT/data:/var/neo4j/data" -d --restart always --label dokku=service --label dokku.service=neo4j "$NEO4J_NEO4J_PLUGIN_IMAGE_VERSION:$PLUGIN_IMAGE_VERSION")
    echo "$ID" > "$SERVICE_ROOT/ID"
    echo "Enterprise" > "$SERVICE_ROOT/EDITION"

    dokku_log_verbose_quiet "Waiting for container to be ready"
    docker run --rm --link "$SERVICE_NAME:$NEO4J_PLUGIN_COMMAND_PREFIX" aanand/wait

    dokku_log_info2 "$NEO4J_PLUGIN_SERVICE container created: $SERVICE"
    dokku "$NEO4J_PLUGIN_COMMAND_PREFIX:info" "$SERVICE"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:destroy)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$NEO4J_PLUGIN_DATA_ROOT/$SERVICE"; LINKS_FILE="$SERVICE_ROOT/LINKS"

    [[ -s "$LINKS_FILE" ]] && dokku_log_fail "Cannot delete linked service"

    [[ "$3" == "force" ]] && DOKKU_APPS_FORCE_DELETE=1
    if [[ -z "$DOKKU_APPS_FORCE_DELETE" ]]; then
      dokku_log_warn "WARNING: Potentially Destructive Action"
      dokku_log_warn "This command will destroy $SERVICE $NEO4J_PLUGIN_SERVICE service."
      dokku_log_warn "To proceed, type \"$SERVICE\""
      echo ""

      read -p "> " service_name
      if [[ "$service_name" != "$SERVICE" ]]; then
        dokku_log_warn "Confirmation did not match $SERVICE. Aborted."
        exit 1
      fi
    fi

    dokku_log_info1 "Deleting $SERVICE"
    if [[ -f "$SERVICE_ROOT/ID" ]] && docker ps -aq --no-trunc | grep -q "$(cat "$SERVICE_ROOT/ID")"; then
      ID=$(cat "$SERVICE_ROOT/ID")

      dokku_log_verbose_quiet "Deleting container data"
      service_start "$SERVICE"
      docker exec -it "$ID" chmod -R 777 /var/neo4j/data

      service_stop "$SERVICE"

      dokku_log_verbose_quiet "Removing container"
      docker rm -v "$ID" > /dev/null
      sleep 1
    else
      dokku_log_verbose_quiet "No container exists for $SERVICE"
    fi

    dokku_log_verbose_quiet "Removing data"
    rm -rf "$SERVICE_ROOT"

    dokku_log_info2 "$NEO4J_PLUGIN_SERVICE container deleted: $SERVICE"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:link)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ -z $3 ]] && dokku_log_fail "Please specify an app to run the command on"
    verify_app_name "$3"
    verify_service_name "$2"
    service_link "$2" "$3"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:unlink)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ -z $3 ]] && dokku_log_fail "Please specify an app to run the command on"
    verify_app_name "$3"
    verify_service_name "$2"
    service_unlink "$2" "$3"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:export)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$NEO4J_PLUGIN_DATA_ROOT/$SERVICE";
    service_dump_database "$SERVICE" "force"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:backup)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2";
    service_backup "$SERVICE"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:import)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$NEO4J_PLUGIN_DATA_ROOT/$SERVICE"
    SERVICE_TMP="$SERVICE_ROOT/tmp_import"
    SERVICE_NAME=$(get_service_name "$SERVICE")
    SERVICE_VERSION="$(service_version "$SERVICE")"
    SERVICE_STATUS="$(service_status "$SERVICE")"

    if [[ -t 0 ]]; then
      dokku_log_fail "No data provided on stdin."
    fi
    mkdir -p "$SERVICE_TMP" > /dev/null
    service_stop "$SERVICE" > /dev/null
    cat > "$SERVICE_TMP/dump.tar.gz"
    docker run -t --rm  -v "$SERVICE_TMP:/var/neo4j/tmp" -v "$SERVICE_ROOT/data:/var/neo4j/data" "$SERVICE_VERSION" sh -c 'rm -rf /var/neo4j/data/graph.db && tar -xzvf /var/neo4j/tmp/dump.tar.gz -C "/var/neo4j/data"' > /dev/null
    rm -rf "$SERVICE_TMP" > /dev/null
    if [[ "$SERVICE_STATUS" == "(running)" ]]; then
      service_start "$SERVICE"
      dokku_log_info1 "Please call dokku ps:restart on all linked apps"
      dokku_log_info1 "$(cat $SERVICE_ROOT/LINKS)"
    fi
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:logs)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_logs "$2" "$3"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:start)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_start "$2"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:stop)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_stop "$2"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:restart)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_stop "$2"
    service_start "$2"
    propose_linked_apps_restarting "$2"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:connect)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    SERVICE="$2"; SERVICE_ROOT="$NEO4J_PLUGIN_DATA_ROOT/$SERVICE"
    SERVICE_NAME=$(get_service_name "$SERVICE")
    EDITION=$(service_edition "$SERVICE")

    ensure_docker_images

    if [[ "$EDITION" == "Community" ]]; then
      PLUGIN_IMAGE=$NEO4J_PLUGIN_IMAGE_COMMUNITY;
    else
      PLUGIN_IMAGE=$NEO4J_NEO4J_PLUGIN_IMAGE_VERSION;
    fi

    # shellcheck disable=SC2016
    docker run -it --link "$SERVICE_NAME:neo4j" --rm "$PLUGIN_IMAGE:$NEO4J_IMAGE_VERSION" sh -c 'exec /var/neo4j/bin/neo4j-shell -host "$NEO4J_PORT_7474_TCP_ADDR"'
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:info)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_info "$2"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:list)
    service_list
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:clone)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    [[ -z $3 ]] && dokku_log_fail "Please specify a name for the new service"
    verify_service_name "$2"
    SERVICE="$2"
    NEW_SERVICE="$3"
    EDITION=$(service_edition "$SERVICE")

    if [[ "$EDITION" == "Community" ]]; then
      dokku "$NEO4J_PLUGIN_COMMAND_PREFIX:create" "$NEW_SERVICE"
    else
      dokku "$NEO4J_PLUGIN_COMMAND_PREFIX:create-enterprise" "$NEW_SERVICE"
    fi

    dokku_log_info1 "Copying data from $SERVICE to $NEW_SERVICE"
    dokku "$NEO4J_PLUGIN_COMMAND_PREFIX:export" "$SERVICE" | dokku "$NEO4J_PLUGIN_COMMAND_PREFIX:import" "$NEW_SERVICE" > /dev/null 2>&1 || true
    dokku_log_info1 "Done"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:expose)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_port_expose "$2"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:unexpose)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    verify_service_name "$2"
    service_port_unexpose "$2"
    ;;

  $NEO4J_PLUGIN_COMMAND_PREFIX:s3config)
    [[ -z $2 ]] && dokku_log_fail "Please specify a name for the service"
    SERVICE="$2"; SERVICE_ROOT="$NEO4J_PLUGIN_DATA_ROOT/$SERVICE"; S3_COORDINATES="$SERVICE_ROOT/S3_COORDINATES"

    touch "$S3_COORDINATES"

    echo
    dokku_log_info1 "Configure S3 coordinates for the service $SERVICE"
    echo
    read -p "AWS Access Key ID > " S3_KEY
    read -p "AWS Secret Access Key > " S3_SECRET
    read -p "S3 Region > " S3_REGION
    read -p "S3 Bucket > " S3_BUCKET
    read -p "Files keys prefix (without leading and trailing /) > " S3_PREFIX

    echo
    read -p "Do you want to proceed? [yes] (type 'n' to abort) > " ABORT
    if [[ "$ABORT" != "n" ]]; then

      echo "#!/usr/bin/env bash" > "$S3_COORDINATES"
      echo "export S3_KEY=$S3_KEY" >> "$S3_COORDINATES"
      echo "export S3_SECRET=$S3_SECRET" >> "$S3_COORDINATES"
      echo "export S3_REGION=$S3_REGION" >> "$S3_COORDINATES"
      echo "export S3_BUCKET=$S3_BUCKET" >> "$S3_COORDINATES"

      if [ -n "$S3_PREFIX" ]; then
        echo "export S3_PREFIX=$S3_PREFIX" >> "$S3_COORDINATES"
      fi

      echo
      dokku_log_info2 "S3 coordinates saved"
    else
      echo
      dokku_log_info2 "Aborted"
    fi
    ;;

  help)
    HELP=$(cat<<EOF
    $NEO4J_PLUGIN_COMMAND_PREFIX:alias <name> <alias>, Set an alias for the docker link
    $NEO4J_PLUGIN_COMMAND_PREFIX:create <name>, Create a $NEO4J_PLUGIN_SERVICE Community service
    $NEO4J_PLUGIN_COMMAND_PREFIX:create-enterprise <name>, Create a $NEO4J_PLUGIN_SERVICE Enterprise service
    $NEO4J_PLUGIN_COMMAND_PREFIX:destroy <name>, Delete the $NEO4J_PLUGIN_SERVICE service and stop its container if there are no links left
    $NEO4J_PLUGIN_COMMAND_PREFIX:link <name> <app>, Link the $NEO4J_PLUGIN_SERVICE service to the app
    $NEO4J_PLUGIN_COMMAND_PREFIX:unlink <name> <app>, Unlink the $NEO4J_PLUGIN_SERVICE service from the app
    $NEO4J_PLUGIN_COMMAND_PREFIX:backup <name>, Executes a backup of the $NEO4J_PLUGIN_SERVICE service database.
    $NEO4J_PLUGIN_COMMAND_PREFIX:s3config <name>, Provide coordinates to store the backup files on Amazon S3
    $NEO4J_PLUGIN_COMMAND_PREFIX:export <name> > <file>, Export a dump of the $NEO4J_PLUGIN_SERVICE service database
    $NEO4J_PLUGIN_COMMAND_PREFIX:import <name> < <file>, Import a dump into the $NEO4J_PLUGIN_SERVICE service database
    $NEO4J_PLUGIN_COMMAND_PREFIX:connect <name>, Connect via neo4j-shell to a $NEO4J_PLUGIN_SERVICE service
    $NEO4J_PLUGIN_COMMAND_PREFIX:logs <name> [-t], Print the most recent log(s) for this service
    $NEO4J_PLUGIN_COMMAND_PREFIX:restart <name>, Graceful shutdown and restart of the $NEO4J_PLUGIN_SERVICE service container
    $NEO4J_PLUGIN_COMMAND_PREFIX:info <name>, Print the connection information
    $NEO4J_PLUGIN_COMMAND_PREFIX:list, List all $NEO4J_PLUGIN_SERVICE services
    $NEO4J_PLUGIN_COMMAND_PREFIX:clone <name> <new-name>, Create container <new-name> then copy data from <name> into <new-name>
    $NEO4J_PLUGIN_COMMAND_PREFIX:expose <name>, Expose a $NEO4J_PLUGIN_SERVICE service on random ports
    $NEO4J_PLUGIN_COMMAND_PREFIX:unexpose <name>, Unexpose a previously exposed $NEO4J_PLUGIN_SERVICE service
    $NEO4J_PLUGIN_COMMAND_PREFIX:start <name>, Start a previously stopped $NEO4J_PLUGIN_SERVICE service
    $NEO4J_PLUGIN_COMMAND_PREFIX:stop <name>, Stop a running $NEO4J_PLUGIN_SERVICE service

EOF
)
    if [[ -n $DOKKU_API_VERSION ]]; then
      echo "$HELP"
    else
      cat && echo "$HELP"
    fi
    ;;

  *)
    exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
    ;;

esac
